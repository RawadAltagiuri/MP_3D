function plotConfigTree(configMap, sp)
    % Add the sp.goal_conf to the map, its parent is itself
    goalNode.path = sp.goal_conf;
    goalNode.h = 0;
    goalNode.g = 0;
    goalNode.f = 0;
    configMap(mat2str(sp.goal_conf)) = goalNode;
    configs = keys(configMap);
    numConfigs = length(configs);

    goalConfig = sp.goal_conf;
    startConfig = sp.start_conf;
    final_child = sp.final_child;

    % Initialize arrays for edges and configurations
    src = {};
    tgt = {};
    allConfigs = {};

    % Iterate through each configuration and extract the edges
    for i = 1:numConfigs
        config = configs{i};
        parentConfig = mat2str(configMap(config).path);

        % Add edge if there is a parent configuration
        if ~isempty(parentConfig)
            src{end+1} = char(parentConfig);
            tgt{end+1} = char(config);
        end

        % Store all configurations
        allConfigs{end+1} = config;
    end

    % for each configuration, sum up all the elements in its matrix, we will use that value as its position, x is the first 2 columns, y is the last column, use eval to convert string to matrix
    positions = zeros(numConfigs, 2);
    for i = 1:numConfigs
        config = allConfigs{i};
        matrix = eval(config);
        % use the forward kinematics of the matrix
        matrix = solveForwardKinematics_3D(matrix, sp.home_base, false);
        % Sum over rows for the first two columns and the last column separately
        x_sum = sum(matrix(:, 1:2), 2); % Sum of absolute values of first 2 columns, row-wise
        y_sum = sum(matrix(:, end), 2); % Sum of last column, row-wise
        
        % Assuming you want to store these sums in positions
        % Ensure positions is initialized to the correct size outside the loop
        positions(i, 1) = sum(x_sum); % Total sum of first 2 columns
        positions(i, 2) = sum(y_sum); % Total sum of last column
    end

    %get the heuristic of every configuration
    heuristic = zeros(numConfigs, 1);
    for i = 1:numConfigs
        config = allConfigs{i};
        if(config == mat2str(goalConfig))
            heuristic(i) = 0;
            continue;
        end
        heuristic(i) = calculateCost(eval(config), goalConfig, sp.home_base);
    end
% After calculating positions
    % Find indices of special configurations
    goalConfigIndex = find(strcmp(allConfigs, mat2str(goalConfig)));
    startConfigIndex = find(strcmp(allConfigs, mat2str(startConfig)));
    finalChildIndex = find(strcmp(allConfigs, mat2str(final_child.path(:, end-2:end))));
    

    % Plot the graph
    g = digraph(src, tgt);
    figure;
    % Convert heuristic values to strings and ensure they match the node order
    heuristicStrs = arrayfun(@(x) sprintf('%.2f', x), heuristic, 'UniformOutput', false);

    % Plot the graph with heuristic values as node labels
    h = plot(g, 'XData', positions(:, 1), 'YData', positions(:, 2), 'NodeLabel', heuristicStrs, 'EdgeLabel', {});

    % Rest of the plotting code remains the same
    hold on;

    % After creating the graph 'g'
    % Find actual node IDs in the graph for special configurations
    goalNodeID = findnode(g, mat2str(goalConfig));
    startNodeID = findnode(g, mat2str(startConfig));
    finalChildNodeID = findnode(g, mat2str(final_child.path(:, end-2:end)));

    % Initialize node color indices to 1 (blue) for all nodes
    % The length of nodeColorIndices should match the number of nodes in the graph
    nodeColorIndices = ones(numnodes(g), 1); % Default to blue

    % Update color indices for special configurations using the actual node IDs
    nodeColorIndices(goalNodeID) = 2; % Red for goal
    nodeColorIndices(startNodeID) = 3; % Green for start
    nodeColorIndices(finalChildNodeID) = 4; % Purple for final

    % Define a colormap: first row for blue (default), second for red (goal), third for green (start), fourth for purple (final)
    mycolormap = [0 0 1; 1 0 0; 0 1 0; 0.5 0 0.5];

    % Apply the color indices
    h.NodeCData = nodeColorIndices;

    % Apply the colormap
    colormap(gca, mycolormap);

    xlabel('Angles'); % Set the x-axis label
    ylabel('Robot''s Length'); % Set the y-axis label

    hold off;
end